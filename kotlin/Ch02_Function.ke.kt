fun main(){
    // 함수를 만드는 문법
    // fun 함수이름(매개변수):리턴값의 타입{
    //     함수내에서 실행될 코드들....
    // }

    // 함수는 메인함수의 외부에도, 내부에도 생성이 가능합니다.
    // 변수에 지역변수와 전역변수가 존재하듯, 함수도 그렇다는 뜻입니다

    test1();
    test2( 50, 123.12 )
    test2( 30, 100.123)
    // 매개변수가 있는 함수를 호출할때, 전달인수를 넣는 동작이 하나하나 끝날때 마다
    // '매개변수 이름 :' 를 인텔리제이가 전달인수 앞에 붙여줍니다. 자동으로 입력되는 사항이니,
    // 수동으로 입력하지 않아도 됩니다.
    val k1:Int = 200
    val k2:Double = 12.13
    test2( k1, k2 )
    // 변수가 전달인수로 전달될 때는 앞에 매개변수 이름이 붙지 않습니다.

    test2(a2=66.66, a1=600)
    // 다른 프로그래밍 언어도 마찬가지이지만, 전달인수의 순서는 매개변수의 기수된 순서에 맞춰
    // 넣어줍니다. 다만 위와 같이 순서를 바꾸고자 한다면, '매개변수=' 을 써서, 전달인수와
    // 매개변수의 짝을 맞춰줍니다.


    test3(100, 11.11)
    test3(200)   // a2 에 전달할 값이 생략되어 기본값 0.0 이 a2 변수에 대입됩니다
    test3( a2=30.123 )   // a1 에 전달할 값을 생략하려면 매개변수 이름을 써서 전달값만 전달합니다.
    test3()   // 모두 생략할 수도 있습니다.

    val r1:Int = test4(100, 200)
    val r2:Int = test4(1000, 2000)
    println("r1 : $r1")
    println("r2 : $r2")
    println("----------------------------------------")

    test5()

    test6();    test6(100);    test6(11.11);    test6(100, 200)

    test7();
    // test8();  // 에러 - 다른 함수 안에 정의된 함수는 지역 변수와 같은 영역 함수로 인식되어 외부에서 호출할 수 없습니다
}

// 함수 안의 함수 정의
fun test7(){
    println("test7 함수의 호출")
    fun test8(){
        println("test8 함수의 호출")
    }
    test8();
}


// 함수의 오버로딩 - 매개변수의 형태와 갯수를 달리한 같은 이름의 함수들을 정의하고 사용합니다
fun test6(){
    println("test6 호출 - 매개변수 없음")
    println("------------------------------")
}
fun test6(a1:Int=200){
    println("test6 호출 - 매개 변수 한 개(Int)")
    println("-----------------------------")
}
fun test6(a1:Double){
    println("test6 호출 - 매개 변수 한 개(Double)")
    println("----------------------------")
}
fun test6(a1:Int=200, a2:Int=300){
    println("test6 호출 - 매개 변수 두 개(Int  Int")
    println("------------------------------")
}



// Unit : void 의 의미로 사용되며, 대부분은 생략된채로 사용됩니다.
fun test5():Unit{
    println("test5 호출")
    println("----------------------------")
}



// 리턴(반환)값이 있는 함수
// fun 함수이름(매개변수):리턴값의 자료형 {  }
fun test4(a1:Int, a2:Int) : Int{
    val result:Int = a1 + a2
    return result
}



// 매개변수에 기본값(default value)가 있는 함수 : 해당 매개변수에 전달되는 값이 없으면, 기본값이
// 변수에 대입 됩니다
fun test3( a1:Int = 0,  a2:Double = 0.0){
    println("test3 호출")
    println("a1 : $a1")
    println("a2 : $a2")
    println("----------------------")
}

// 전달인수(매개변수)가 있고, 반환값이 없는 함수
// 매개변수를 선언할때는 var 이라는 키워드 없이, 변수의 이름과 자료형만 기술합니다
fun test2( a1:Int, a2:Double ){
    println("test2 호출")
    println("a1 : $a1")
    println("a2 : $a2")
    println("----------------------")
}


// 기본함수 ( 전달인수 없고, 반환값 없는 함수
fun test1(){
    println("test1 함수 호출")
    println("----------------------")
}